# 2Password Phase 1 产品需求文档 (PRD)

## 产品概述

### 产品定位
2Password Phase 1 是一个轻量级的命令行密码管理工具，专为个人用户设计，用于替代不安全的 iCloud 明文密码存储。通过 Passkey 技术和简单密码的结合，提供银行级安全性和消费级易用性。

### 目标用户
- **主要用户**：技术背景的个人用户
- **使用场景**：日常密码管理、开发工作环境、安全意识较强的用户
- **平台范围**：macOS 用户（配备 Touch ID 的设备）

## 产品目标

### 核心目标
1. **安全性**：提供军用级加密保护，消除明文密码存储风险
2. **易用性**：用户只需记住简单密码（如 "123456"），其余通过 Touch ID 完成
3. **可靠性**：确保密码数据永不丢失，设备损坏也能完全恢复
4. **性能**：启动和操作响应时间控制在毫秒级别

### 成功指标
- 用户能够在 5 分钟内完成初始设置
- 日常解锁操作在 3 秒内完成
- 零数据丢失事件
- 用户满意度 > 9/10

## 功能需求规格

### 1. 核心安全功能

#### 1.1 密码库初始化
**功能描述**：创建加密的密码存储库
**输入**：
- 用户设定的简单主密码（4-20 字符）
- Touch ID 生物识别验证

**输出**：
- 加密的密码库文件 (~/.2password/vault.enc)
- Passkey 注册到系统钥匙串
- 恢复密钥生成

**验收标准**：
- [ ] 支持简单密码输入（最少 4 字符）
- [ ] 成功完成 Touch ID 注册
- [ ] 生成 AES-256-GCM 加密的密码库
- [ ] 创建恢复分片（2-of-3 方案）
- [ ] 显示一次性恢复密钥给用户记录

#### 1.2 密码库解锁
**功能描述**：验证用户身份并解锁密码库
**输入**：
- 简单主密码
- Touch ID 生物识别

**输出**：
- 解锁成功/失败状态
- 内存中可用的解密密钥（有时效性）

**验收标准**：
- [ ] 支持密码输入验证
- [ ] 集成 macOS Touch ID 验证
- [ ] 解锁后密钥在内存中保持 15 分钟
- [ ] 3 次失败尝试后锁定 5 分钟
- [ ] 密钥从内存安全清零

#### 1.3 自动锁定机制
**功能描述**：自动保护密码库安全
**触发条件**：
- 15 分钟无操作
- 系统睡眠/锁屏
- 用户手动锁定

**验收标准**：
- [ ] 定时器自动锁定功能
- [ ] 系统事件触发锁定
- [ ] 手动锁定命令支持
- [ ] 锁定后内存完全清理

### 2. 密码条目管理

#### 2.1 添加密码条目
**命令格式**：`2pass add <site> [options]`
**必填字段**：
- 网站/服务名称
- 用户名  
- 密码

**可选字段**：
- URL 地址
- 备注信息
- 标签分类

**验收标准**：
- [ ] 交互式添加流程
- [ ] 字段验证和格式检查
- [ ] 重复条目检测和提示
- [ ] 即时加密存储

#### 2.2 查询密码条目
**命令格式**：`2pass get <site> [options]`
**输出格式**：
- 默认仅显示用户名
- `-p, --password` 显示密码（3 秒后清屏）
- `--copy` 复制到剪贴板（30 秒后清空）

**验收标准**：
- [ ] 支持模糊匹配搜索
- [ ] 多条结果时显示选择菜单
- [ ] 安全的密码显示机制
- [ ] 自动剪贴板清理

#### 2.3 列出所有条目
**命令格式**：`2pass list [options]`
**输出字段**：
- 网站名称
- 用户名
- 创建时间
- 最后修改时间

**验收标准**：
- [ ] 支持表格格式显示
- [ ] 按名称、时间排序
- [ ] 支持标签过滤
- [ ] 分页显示（超过 20 条）

#### 2.4 编辑密码条目  
**命令格式**：`2pass edit <site>`
**功能**：
- 修改现有条目的任意字段
- 交互式编辑界面

**验收标准**：
- [ ] 选择性字段编辑
- [ ] 编辑前显示当前值
- [ ] 支持取消操作
- [ ] 自动备份旧版本

#### 2.5 删除密码条目
**命令格式**：`2pass delete <site>`
**安全机制**：
- 显示条目详情确认
- 二次确认删除操作
- 软删除（30 天内可恢复）

**验收标准**：
- [ ] 双重确认机制
- [ ] 软删除和回收站
- [ ] 批量删除支持
- [ ] 删除日志记录

### 3. 密码生成功能

#### 3.1 安全密码生成
**命令格式**：`2pass generate [options]`
**参数选项**：
- `--length, -l`：密码长度（默认 16）
- `--numbers, -n`：包含数字
- `--symbols, -s`：包含特殊符号  
- `--exclude, -e`：排除指定字符

**验收标准**：
- [ ] 使用加密安全随机数生成器
- [ ] 支持自定义密码策略
- [ ] 自动复制到剪贴板
- [ ] 显示密码强度评分

#### 3.2 密码强度评估
**功能描述**：评估密码安全强度
**评估维度**：
- 长度、复杂度、熵值
- 常见密码检测
- 字典攻击检测

**验收标准**：
- [ ] 实时强度评分（1-5 星）
- [ ] 安全建议提示
- [ ] 弱密码警告
- [ ] 密码泄露检测（本地字典）

### 4. 备份和恢复

#### 4.1 本地备份
**命令格式**：`2pass backup [path]`
**备份内容**：
- 加密的密码库文件
- 恢复密钥元数据
- 配置文件

**验收标准**：
- [ ] 自动备份到指定路径
- [ ] 带时间戳的备份文件名
- [ ] 压缩加密的备份包
- [ ] 备份完整性校验

#### 4.2 灾难恢复
**场景支持**：
- 设备损坏（Touch ID 丢失）
- 忘记简单密码
- 文件损坏

**恢复方式**：
- 简单密码 + 恢复密钥
- Touch ID + 恢复密钥  
- 完整备份文件恢复

**验收标准**：
- [ ] 智能恢复向导
- [ ] 多种恢复路径支持
- [ ] 恢复过程状态提示
- [ ] 恢复后完整性验证

### 5. 命令行界面

#### 5.1 基础 CLI 命令
**必须实现的命令**：
```bash
2pass init                    # 初始化密码库
2pass unlock                  # 解锁密码库  
2pass lock                    # 锁定密码库
2pass add <site>             # 添加密码条目
2pass get <site>             # 查询密码条目
2pass list                   # 列出所有条目
2pass edit <site>            # 编辑条目
2pass delete <site>          # 删除条目
2pass generate               # 生成密码
2pass backup [path]          # 备份密码库
2pass recover                # 恢复向导
2pass --version              # 显示版本
2pass --help                 # 显示帮助
```

#### 5.2 用户体验设计
**交互原则**：
- 清晰的命令提示和错误信息
- 彩色输出和进度指示
- 安全信息的自动隐藏
- 键盘快捷键支持

**验收标准**：
- [ ] 一致的命令格式和参数
- [ ] 友好的错误提示信息
- [ ] Tab 自动补全支持
- [ ] 彩色和格式化输出
- [ ] 帮助文档完整性

## 技术约束

### 平台要求
- **操作系统**：macOS 10.15+ (Catalina)
- **硬件要求**：配备 Touch ID 的 Mac 设备
- **运行时**：Rust 1.70+ 编译的原生二进制

### 性能要求
- **启动时间**：< 100ms（冷启动）
- **解锁时间**：< 3s（包含用户交互）
- **搜索响应**：< 100ms（1000 条记录内）
- **内存占用**：< 10MB（解锁状态）

### 安全约束
- **加密标准**：仅使用 NIST 认可的算法
- **密钥管理**：内存中密钥生存期 < 15 分钟
- **审计日志**：记录所有安全关键操作
- **权限最小化**：仅请求必要的系统权限

## 非功能性需求

### 可用性
- 初次使用用户能在 5 分钟内完成设置
- 常用操作步骤不超过 3 步
- 错误信息提供明确的解决方案

### 可靠性  
- 密码库文件损坏率 < 0.01%
- 自动备份成功率 > 99.9%
- Touch ID 验证成功率 > 95%

### 安全性
- 抵御暴力破解攻击（> 2^80 复杂度）
- 防止内存转储泄露
- 通过安全审计（如 cargo audit）

### 可维护性
- 代码覆盖率 > 80%
- 所有公共 API 有文档
- 遵循 Rust 社区最佳实践

## 测试计划

### 单元测试
- [ ] 加密/解密功能测试
- [ ] 密钥派生算法测试  
- [ ] 密码生成器测试
- [ ] 恢复机制测试

### 集成测试
- [ ] Touch ID 集成测试
- [ ] 文件系统操作测试
- [ ] 命令行接口测试
- [ ] 端到端用户场景测试

### 安全测试
- [ ] 密码学实现安全审计
- [ ] 内存泄露检测
- [ ] 时序攻击防护测试
- [ ] 权限边界测试

### 用户验收测试
- [ ] 新用户上手流程测试
- [ ] 常见使用场景测试
- [ ] 错误处理和恢复测试
- [ ] 性能基准测试

## 发布计划

### 里程碑时间线
- **Week 1-2**：核心加密模块开发
- **Week 3-4**：Passkey 集成和 CLI 框架
- **Week 5-6**：密码管理功能完善
- **Week 7-8**：测试、优化和文档

### 发布标准
- [ ] 所有核心功能测试通过
- [ ] 性能指标达到要求
- [ ] 安全审计无高危问题
- [ ] 用户文档完整
- [ ] 至少 5 名用户完成 beta 测试

## 风险评估

### 高风险项
1. **Touch ID 集成复杂性**：缓解方案是提前 POC 验证
2. **Passkey 标准不稳定**：采用成熟的 WebAuthn 库
3. **跨版本兼容性**：详细的迁移测试

### 中风险项
1. **性能不达标**：提前性能基准测试
2. **用户体验不佳**：早期用户反馈收集

## 依赖和假设

### 外部依赖
- macOS LocalAuthentication 框架稳定性
- Rust 生态系统加密库成熟度
- Apple 对 Touch ID API 的持续支持

### 关键假设
- 用户设备配备 Touch ID 功能
- 用户具备基础命令行使用能力
- 用户信任本地加密存储方案